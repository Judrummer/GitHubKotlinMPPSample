import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
    id 'com.android.library'
    id 'com.squareup.sqldelight'
    id 'com.codingfeline.kgql'
    id 'com.codingfeline.buildkonfig'
}

// Load `secret.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/secret.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/secret.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs += 'src/androidMain/kotlin'
        }
        test.java.srcDirs += 'src/androidTest/kotlin'
    }
}

sqldelight {
    packageName = 'com.codingfeline.githubdata.local'
}

kgql {
    packageName = 'com.codingfeline.githubdata.api'
}

buildkonfig {
    packageName = "com.codingfeline.githubdata"
    defaultConfigs {
        buildConfigField 'STRING', 'GITHUB_TOKEN', GITHUB_API_TOKEN
    }
}

kotlin {

    def iosTargetName = project.findProperty("kotlin.target") ?: "iosX64"
    def iosTarget = presets.getByName(iosTargetName)

    android("android")

    targetFromPreset(iosTarget, "ios") {
        binaries {
            framework()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation deps.kotlin.stdlib.common
                implementation deps.kotlin.coroutines.common
                implementation deps.kotlin.serialization.common

                implementation deps.ktor.core
                implementation deps.ktor.json
            }
        }
        commonTest {
            dependencies {
                implementation deps.kotlin.test.common
                implementation deps.kotlin.test.commonAnnotations
            }
        }
        androidMain {
            dependsOn commonMain
            dependencies {
                implementation deps.kotlin.stdlib.jdk7
                implementation deps.kotlin.coroutines.android
                implementation deps.kotlin.serialization.jvm

                implementation deps.ktor.android
                implementation deps.ktor.jsonJvm

                implementation deps.sqldelight.driverAndroid
            }
        }
        androidTest {
            dependsOn androidMain
            dependencies {
                implementation deps.kotlin.test.jvm
                implementation deps.kotlin.test.junit

                implementation deps.robolectric.core
            }
        }

        iosMain {
            dependencies {
                implementation deps.kotlin.coroutines.native
                implementation deps.kotlin.serialization.native

                implementation deps.ktor.ios
                implementation deps.ktor.jsonIos

                implementation deps.sqldelight.driverIOs
            }
        }

        iosTest {

        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}


// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "iosX64"
    def bin = kotlin.targets.ios.compilations.main.target.binaries.findFramework("", buildType)
    dependsOn bin.linkTask

    doLast {
        def srcFile = kotlin.targets.ios.compilations.main.target.binaries.findFramework("", buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")

        println("iOS buildType: $buildType")
        println("iOS target: $target")

        copy {
            from srcFile.parent
            into targetDir
            include 'data.framework/**'
            include 'data.framework.dSYM'
        }
    }
}
